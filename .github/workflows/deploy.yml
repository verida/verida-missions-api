name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy on"
        type: environment
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ inputs.environment }}

jobs:
  deploy:
    name: Deploy
    environment:
      name: ${{ inputs.environment }}
      url: ${{ vars.URL }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      VERIDA_NETWORK: ${{ vars.VERIDA_NETWORK }}
      NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
      AIRDROP_1_NOTION_DB_ID: ${{ vars.AIRDROP_1_NOTION_DB_ID }}
      AIRDROP_2_NOTION_DB_ID: ${{ vars.AIRDROP_2_NOTION_DB_ID }}
      AIRDROPS_SENDER_ACCOUNT_PRIVATE_KEY: ${{ secrets.AIRDROPS_SENDER_ACCOUNT_PRIVATE_KEY }}
      BLOCKCHAIN_VDA_CONTRACT_ADDRESS: ${{ vars.BLOCKCHAIN_VDA_CONTRACT_ADDRESS }}
      BLOCKCHAIN_RPC_URL: ${{ vars.BLOCKCHAIN_RPC_URL }}
      BLOCKCHAIN_TRANSACTION_EXPLORER_URL: ${{ vars.BLOCKCHAIN_TRANSACTION_EXPLORER_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Define node version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Set up node
        uses: actions/setup-node@v3.5.1
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn run build

      - name: Deploy server to Lambda
        # serverless.yml cannot take the stage from env vars so have to set it in cli options
        env:
          AWS_LAMBDA_STAGE: ${{ vars.LAMBDA_STAGE }}
          AWS_LAMBDA_REGION: ${{ vars.LAMBDA_REGION }}
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Run sls directly rather than using a yarn script, so we can pass a variable for the stage
        run: npx serverless deploy --stage $AWS_LAMBDA_STAGE
